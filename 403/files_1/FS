{ FS}PROGRAM File_Server;CONST{$E+    Extended error messages ON}verA=0; {Version number verA.verB verC}verB=0;verC=7;buff_size=10*256;min_size=80; {Size of minibuffers}name_size=128;CR=13;cmdport=9*16+9;data_port=1;ack_port=2; {These are both re-declared locally when they are variables}cache_size=20; {size in sectors}max_handle=800; {40 users at 20 handles each ?}max_drive=15;TYPEbyte=0..255;nibble=0..15;buffer=ARRAY [1..buff_size] of BYTE;minibuffer=ARRAY [1..min_size] of BYTE;dbl_word=ARRAY [1..4] OF byte;$STRING255=STRING 255;$STRING0=STRING 0;$2STRING=STRING 2;$STRING10=STRING 10;handles=RECORD  lib,CSD,URD:BYTEEND;stdRX=RECORD  data:minibuffer;  envir:handles;  FN:byte;  reply:byteEND;stdTX=RECORD  data:minibuffer;  rtncode:byte;  cmd:byteEND;R_W=(rd,wr);cache_descrip=RECORD  handle:integer;  block:integer; {<block> is the block number in block size units}  sector:byte; {<sector> is the sector (256 bytes) offset in the block}end;VAR mainRX:stdRX;mainTX:stdTX;dummybyte,blockno:BYTE;client_stn,dummy:INTEGER;big_buffer:buffer;{Econet Externals}PROCEDURE ECOINIT; EXTERNAL;PROCEDURE RXSET(VAR blockno:BYTE;port:BYTE;stn,data,length:INTEGER);EXTERNAL;FUNCTION RXREAD(blockno:BYTE;VAR ctrl,port:BYTE;VAR stn,length:INTEGER):BOOLEAN;EXTERNAL;PROCEDURE RXDEL(blockno:BYTE);EXTERNAL;PROCEDURE TRANSMIT(ctrl:byte;port:byte;stn:INTEGER;data:INTEGER;length:INTEGER;VAR result:byte); EXTERNAL;{ 'FSRTN' externals }FUNCTION ADDR1(VAR data:buffer):INTEGER; EXTERNAL;FUNCTION ADDR2(VAR data:stdRX):INTEGER; EXTERNAL;FUNCTION ADDR3(VAR data:stdRX):INTEGER; EXTERNAL;{Not currently used}FUNCTION ADDR4(VAR data:minibuffer):INTEGER; EXTERNAL;FUNCTION ADDRINT(VAR data:byte):INTEGER; EXTERNAL;PROCEDURE PUTSTR(addr:INTEGER;VAR srce:$STRING0); EXTERNAL;PROCEDURE GETSTR(addr:INTEGER;length:BYTE;VAR dest:$STRING0); EXTERNAL;PROCEDURE GETSTRCR(addr:INTEGER;maxlength:BYTE;VAR dest:$STRING0); EXTERNAL;FUNCTION LENGTH(X:$STRING255):INTEGER;EXTERNAL;FUNCTION INDEX(X,Y:$STRING255):INTEGER; EXTERNAL;PROCEDURE Mid$(VAR text:$STRING0;start,length:BYTE); EXTERNAL;Function Land(a,b:Integer):Integer;External; {Logical AND (bitwise)}Function Hi(a:Integer):BYTE; External;Function Lo(a:Integer):BYTE; External;FUNCTION CLI(VAR text:$STRING0):BYTE;EXTERNAL;{ Module externals }PROCEDURE Star_info(VAR fname:$string0);External;PROCEDURE Star_delete(VAR fname:$STRING0);External;PROCEDURE Starcmd;External;PROCEDURE Log_off;External;PROCEDURE Save;External;PROCEDURE Load;External;PROCEDURE Read_info;External;PROCEDURE User_envir;External;PROCEDURE Cat;External;FUNCTION Hex2$(x:BYTE):$2STRING;External;PROCEDURE Hex1(digit:NIBBLE);External;PROCEDURE Hex2(val:Byte);External;PROCEDURE Dbl_print(A:dbl_word);External;FUNCTION Dbl_zero(val:dbl_word):BOOLEAN;External;FUNCTION Dbl_subt(val1,val2:dbl_word):dbl_word;External;FUNCTION Makedbl(val:INTEGER):dbl_word;External;PROCEDURE Notlistening;External;PROCEDURE Txerr(msg:$STRING255;no:BYTE);External;PROCEDURE Err_message(errno:BYTE);External;PROCEDURE ReplyOK;External;{ Disc handling externals }PROCEDURE Open(handle:INTEGER;rw:R_W;CSD:BYTE;VAR error:BYTE);EXTERNAL;PROCEDURE Put(addr,handle,length:INTEGER;VAR error:BYTE);EXTERNAL;PROCEDURE Get(addr,handle,length:INTEGER;VAR error:BYTE);EXTERNAL;PROCEDURE Close(handle:INTEGER);EXTERNAL;FUNCTION Size(Handle:INTEGER):dbl_word;EXTERNAL;FUNCTION Block(VAR fname:$STRING0;VAR error:byte):INTEGER;EXTERNAL;PROCEDURE Delete(handle:INTEGER;VAR error:byte);EXTERNAL;FUNCTION Dir_first(handle,address:INTEGER):BYTE;EXTERNAL;FUNCTION Dir_next(handle,address:INTEGER):BYTE;EXTERNAL;Procedure I_am; External;PROCEDURE Cache_init; External;PROCEDURE Cache_idle; External;PROCEDURE Cache_empty; External;BEGINECOINIT;cache_init;writeln(' PSJ File Server version ',verA:1,'.',verB:1,verC:1);writeln;Writeln('Ready',chr(17)); {ctrl-Q disables page wait on RML}REPEAT {Main operating loop}RXSET(blockno,cmdport,0,ADDR2(mainRX),min_size+5);REPEAT{Idle time in here!}Cache_idle;UNTIL RXREAD(blockno,dummybyte,dummybyte,client_stn,dummy);WRITELN('FN=',mainRX.FN:3);CASE mainRX.fn OF  0:Starcmd;  1:Save;  2:Load;  3:Cat;  5:Load; 18:Read_info; 21:User_envir; 23:Log_off;ELSE:txerr('Invalid FN code',133)END;{of case}UNTIL FALSE;END.