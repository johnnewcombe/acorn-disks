.x||M5|r75|\  prin3|w|u4. Client software|t3The prime objective when writing the software for a network client is to retain compatibility with as much as possible of the software which has been written for the machine without a network. It is not reasonable to expect users to use different software when using the network from that previously used with discs directly attatched to the machine. For Z80 based microcomputers, this means that compatibility with the 'CP/M' operating system is essential. This operating system has many faults, but a very large library of software is available for use with it, and it is the operating system supplied with most Z80 based machines which have discs.|t3The authors of CP/M have, in fact, produced a network oriented version, called CP/NET, which provides the client and server software, leaving the system designer to provide a suitable set of network primitives. There are two reasons for not using this system : firstly, users have reported very poor performance, in addition to limitations such as a maximum of 8 users per file server, and secondly we wished to provide compatability with different types of computer, in particular the BBC computer, which use an entirely different high level protocol from that used by CP/NET.|t3Another possibility, which allows the sharing of file servers with other machines, is to run standard CP/M with minor modifications. The subroutines which access the disc may be replaced by subroutines which read appropriate records of a very large file on the file server. There would be one master file per user, each containing a CP/M file structure and acting like a small independant disc drive. Whilst this is by far the easiest option, one of the best features of the network file server is the ability for users to share files : language compilers, text editors, and large databases can all be placed on the file server and used from any station on the network.|t3The final conclusion is that we must write a piece of software which emulates all the facilities provided by CP/M in terms of the network protocols for the Acorn type file server. This means that programs which make requests for information about files and the data in the files receive exactly the same replies as they would from a normal CP/M operating system. In many cases, each CP/M function will require several interactions with the file server to obtain all the information, while in others no action will be required outside the client machine.|t3While the Acorn file server protocol allows all the important operations of CP/M, there are several incompatibilities which must be resolved. It is also useful to allow access to the extra facilities of the Acorn type file server. The two systems have very different file structures ; fortunately, CP/M has the simpler of the two and is almost a subset of the Acorn provisions. There are unfortunately some features which are similar to those provided in the Acorn system, but operate differently.|t3The main difference is that the Acorn file server has a heirarchical directory structure while CP/M has only a single directory. A heirarchical structure has one main directory (called the 'Root'), which can contain other directories in addition to its more normal role of containing files. This process can continue to as many levels as is required, allowing users to segregate their files into as many separate groups (directories) as required. For example, the root will usually contain one directory for each user who is allowed access to the system, each of which may contain a separate directory for each project in which the user is involved. If one of these is, for example, a collection of word processor files, it may be convenient to use another level so that the word processing directory contains separate directories for technical reports, business letters, personal correspondance or whatever is appropriate. This is clearly a great advantage for a system where there may be many users at different times : if all the files were contained in one large directory, different users would often confuse their files with one another, or would be unable to find them in a directory listing containing many hundreds of files. It is possible to select which directory is to be used for normal file access, but it is also possible to select files from any part of the structure by using the character '$' which refers to the root, followed by the directories containing the required file, separated by dots, ending with the file name. To use the example above, this section of this report might be accesed by '$.andrew.text.econet.client' or by selecting '$.andrew.text.econet' as the current directory and loading file 'client'. Privacy between users is controlled by other mechanisms.|t3CP/M in contrast has only one directory, but divides the names of files into two parts - the 'name' and the 'extension' separated by a dot. The extension is limited to 3 characters, and serves to separate files of different types - text files may have extension .TXT while files containing Pascal programs may be .PAS . In addition, more recent versions have a concept of a 'user number' which effectively divides the disc into 16 separate directories, but files in other user areas cannot in general be accessed.|x..gprin4