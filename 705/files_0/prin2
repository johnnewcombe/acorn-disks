.x||\  prin2|t3The algorithm used is very simple : when a collision is detected, each station involved waits for a length of time proportional to its station number before trying again. Provided that the time unit is longer than the time taken to sample the line and start transmitting, all but the lowest numbered station will find the line busy when they have finished waiting. Other algorithms can be used, but this one is very robust and fail-safe. Some alternatives have the advantage that no station has higher priority than any other, but can become seriously confused if some malfunction has occured. In particular, it is possible for the collision detect circuit to fail if the cable has a high resistance (up to 500m of cable is often used) and the problem is aggravated by poor connections or dirty sockets. To avoid this, the software is written in such a way that collision arbitration is performed in certain circumstances even if no collision has actually been detected. As detailed below, each message starts with a short transmission after which a reply is expected. If no reply is received, either the station is not working, does not exist, or has not received the message due perhaps to a collision. Hence the system will continue to function if collisions are not detected, albeit a little more slowly.|t3The basic unit of communication is a 'packet'. This is simply a collection of data bytes preceded by a header indicating the which station sent it and which station it is destined for, followed by a trailer containing checking information. Before and after each packet is a 'Flag' - a special combination of bits which is used to synchronise the receiver to the sender. This combination of bits is not allowed anywhere else, and if it occurs in normal data the interface hardware inserts an extra bit to change it, the bit being removed automatically at the other end.|t3Building on the basic packet are several layers of protocol for various tasks. The software which provides the first protocol layer is known as the 'Network Primitives'. This allows one station to transmit a message to a destination station if the destination is expecting it and has set up suitable data structures to accept incoming messages. In addition, facilities are provided to perform certain 'immediate' operations without any preparation on the part of the receiving station. These operations include the ability to modify memory, to halt processing and to call subroutines in the distant machine ; all these can be selectively disabled to provide privacy.|t3The network operates on an Interrupt basis : when a packet arrives, the user's program on each station is interrupted momentarily, and the packet is inspected to see if any action is required. In the case of immediate operations, the requested action is performed and some form of acknowledgement is sent to the source of the original message. This is either an empty packet if the operation has been successfully completed, or some data if it was requested. For non-immediate operations, there must be an appropriate 'Receive control block' (usually abbreviated to RxCB) previously set up by the station to indicate that it is happy to receive a message and where such a message should be placed in memory. In this case, after the initial packet has been inspected and a suitable RxCB has been found, a reply will be sent back to the source station which responds by sending the main data. Finally, the receiving station sends an acknowledgement of the fact that the message has been received without transmission errors. The user's program, or the network operating system, will periodically inspect any RxCBs which they have set up to check whether a message has arrived.|t3Most of the network operations use this 'transmission by prior arrangement' form of message exchange. This is not as restrictive as it might appear, since it is possible to set up an RxCB to allow reception from any station as well as the simpler form which only allows reception from a specified station. In addition, there is a 'Port' number associated with each message. This enables the separation of different types of message - the RxCB can specify, for example, any station but port number 6 only to allow commands from any station ; or station number 22 only, but any port to allow the exchange of several different classes of data. In each case, when the port or station has not been specified initially, it is filled in when the message arrives so that the receiving station knows where to address any reply. A final facility is the ability to transmit a broadcast message. This can be received by all stations with suitable RxCBs and can be used, for example, to request a service for which no station number is known : a broadcast could be sent meaning 'I want a printer station'. Any printer stations which were available would send a reply giving their station number and then communication would continue as normal.|t3One of the most important considerations in the design of a system such as this, where electrical noise can never be entirely eliminated, is the detection of errors. The error checking facilities provided will detect most errors resulting in corrupted data : a 'Cyclic Redundancy Check' is performed by the hardware of the network interface. This is a computation of the sum of a polynomial function of each bit of the input data, disregarding any carry which takes the result over 16 bits. The probability of random data matching this function is very low, and the check will also spot common errors such as bits missing altogether as well as bits whose value has been altered. In the case where an error is detected, the destination station does not send an acknowledgement and the source station re-transmits the packet. There is a problem in that an error in an acknowledgement packet may cause some data to be transmitted a second time when it has already been correctly received, and the higher level protocols have to take this into account.|t3The facilities described so far provide a basic, flexible communications medium between all the stations on the network. These do, on their own, have many applications : people have used them for such things as pupil monitoring in a classroom and the collection of bets at a greyhound stadium. However, the original aim was to provide shared access to expensive resources, and this gives rise to the concept of Clients and Servers. Each shared resource has one or more 'servers'. A server is a network station which does not have a user in control of it, but is dedicated to coordinating requests for that particular resource - hence we have File Servers to control discs containing user files, and Printer Servers to control line-printers. Clients are the other network stations whose users are requesting access to the shared resources. The clients communicate with the servers using the standard network primitives, conforming to a protocol to suit the type of service provided.|x..gprin3