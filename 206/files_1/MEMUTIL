 NAME MEMUTIL PROG ; ; ENTRY ADDRINT ENTRY ADDR1 ENTRY ADDR2 ENTRY ADDR3 ENTRY ADDR4 ENTRY PUTSTR ENTRY GETSTR ENTRY GETSTRCR ; ; ; FUNCTION ADDRn(VAR data:<type>):INTEGER ; ; This function is provided to overcome the limitation that a ; FUNCTION has to take parameters of fixed type. This is a problem ; particularly with data areas for RECEIVE and TRANSMIT ; An ADDR function is declared for each type that is to be used in ; this way, and simply returns the address of the variable ; These will usually be structured types to accept a whole packet. ; ; **************************************************************** ;          BEWARE!!! ; This routine CANNOT take an integer TYPE as parameter ; use ADDRINT instead (this removes the extra size byte from stack) ; **************************************************************** ; ;ADDR1ADDR2ADDR3ADDR4 POP H ;Return address POP D ;Return value XRA A ; A=0 to keep Pascal happy PCHL ;JP(HL) by another name! ; ;ADDRINT POP H INX SP ; Discard extra byte (size of integer) POP D XRA A ; A=0 to keep Pascal happy PCHL ; ; ; ; PROCEDURE PUTSTR(addr:INTEGER,VAR srce:$STRING0); ; ; Transfer string <srce> to memory at <addr>, reversing the order of bytes ; and transferring only the assigned length ;PUTSTR POP B ; Return addr POP H ; Pointer to string POP D ; Memory addr PUSH B MOV B,M ; LengthPUT1 DCX H ; Move down string - initially -> length MOV A,M STAX D INX D DJNZ PUT1 XRA A ; A=0 to keep Pascal happy RET ; ; ; ; PROCEDURE GETSTR(addr:INTEGER,length:BYTE,VAR dest:$STRING0); ; ; Reads <length> bytes into string <dest> from memory at <addr>, reversing ; byte order for Pascal convention. ; ;GETSTR POP B ; Return addr POP H ; String addr DCX SP ; push one byte garbage POP PSW ; Length to A, garbage to F POP D ; Mem addr PUSH B MOV B,A MOV M,A ; Set string lengthGET1 DCX H ; Point to next byte down string LDAX D MOV M,A INX D DJNZ GET1 XRA A ; A=0 to keep Pascal happy RET ; ; ; ; ; ; PROCEDURE GETSTRCR(addr:INTEGER;length:BYTE;VAR dest:$STRING0); ; ; Reads bytes into string <dest> from memory at <addr>, reversing ; byte order for Pascal convention. Stops when a CR is encountered, ; or <length> chars have been copied. (The CR is not put into the string) ; ;GETSTRCR POP B ; Return addr POP H ; String addr DCX SP ; push one byte garbage POP PSW ; Length to A, garbage to F POP D ; Mem addr PUSH B ; Put back return address PUSH H ; Needed to insert length MOV B,A ; Max length MVI C,0 ; Count of chars actually copiedGETCR1 DCX H ; Point to next byte down string LDAX D CPI 13 ; Check for CR JRZ GOTCR INR C ; Count MOV M,A INX D DJNZ GETCR1GOTCR POP H ; Addr of top of string - length byte MOV M,C ; Set string length XRA A ; A=0 to keep Pascal happy RET ; ;