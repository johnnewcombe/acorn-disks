{ FS}PROGRAM File_Server;CONST{$E+    Extended error messages ON}{$C- No ctrl-C check}{$L- No listing}verA=0; {Version number verA.verB verC}verB=1;verC=3;buff_size=10*256;min_size=80; {Size of minibuffers}name_size=128;CR=13;cmdport=9*16+9;data_port=1;ack_port=2; {These are both re-declared locally when they are variables}cache_size=20; {size in sectors}max_drive=15;msg_size=40; {Size of banner etc.}no_users=20; {Max number of logged on users}TYPEbyte=0..255;nibble=0..15;buffer=ARRAY [1..buff_size] of BYTE;minibuffer=ARRAY [1..min_size] of BYTE;dbl_word=ARRAY [1..4] OF byte;$STRING255=STRING 255;$STRING0=STRING 0;$2STRING=STRING 2;$STRING10=STRING 10;$STRING80=STRING 80;min_string=string min_size;message=string msg_size;handles=RECORD  lib,CSD,URD:BYTEEND;stdRX=RECORD  data:minibuffer;  envir:handles;  FN:byte;  reply:byteEND;stdTX=RECORD  data:minibuffer;  rtncode:byte;  cmd:byteEND;R_W=(rd,wr);cache_descrip=RECORD  handle:integer;  block:integer; {<block> is the block number in block size units}  sector:byte; {<sector> is the sector (256 bytes) offset in the block}end;fcb=RECORD   { ** WARNING ** size assumed in DISC external routines}  in_use:BOOLEAN;  garbage:array[12..35] OF byte;  extention:array[1..3] of byte;  name:array[1..8] of byte;  drive:byteEND;user_descrip=RECORD  stn:INTEGER;  fcbs:array[1..8] OF fcb;  user_ID:string 3; {**TEMP** replaces pass_ptr}{  pass_ptr:INTEGER; index into password file}  logged_on:BOOLEANEND;VAR mainRX:stdRX;mainTX:stdTX;user_no,dummybyte,blockno:BYTE;client_stn,dummy:INTEGER;big_buffer:buffer;pre_text,post_text,banner,end_text:message;no_banner,stop,messages:boolean;user_info:ARRAY[1..no_users] OF user_descrip;{Econet Externals}PROCEDURE ECOINIT; EXTERNAL;PROCEDURE RXSET(VAR blockno:BYTE;port:BYTE;stn,data,length:INTEGER);EXTERNAL;FUNCTION RXREAD(blockno:BYTE;VAR ctrl,port:BYTE;VAR stn,length:INTEGER):BOOLEAN;EXTERNAL;PROCEDURE RXDEL(blockno:BYTE);EXTERNAL;PROCEDURE TRANSMIT(ctrl:byte;port:byte;stn:INTEGER;data:INTEGER;length:INTEGER;VAR result:byte); EXTERNAL;{ 'FSRTN' externals }FUNCTION ADDR1(VAR data:buffer):INTEGER; EXTERNAL;FUNCTION ADDR2(VAR data:stdRX):INTEGER; EXTERNAL;FUNCTION ADDR3(VAR data:stdRX):INTEGER; EXTERNAL;{Not currently used}FUNCTION ADDR4(VAR data:minibuffer):INTEGER; EXTERNAL;FUNCTION ADDRINT(VAR data:byte):INTEGER; EXTERNAL;PROCEDURE PUTSTR(addr:INTEGER;VAR srce:$STRING0); EXTERNAL;PROCEDURE GETSTR(addr:INTEGER;length:BYTE;VAR dest:$STRING0); EXTERNAL;PROCEDURE GETSTRCR(addr:INTEGER;maxlength:BYTE;VAR dest:$STRING0); EXTERNAL;PROCEDURE Mid$(VAR text:$STRING0;start,length:BYTE); EXTERNAL;Function Land(a,b:Integer):Integer;External; {Logical AND (bitwise)}Function Hi(a:Integer):BYTE; External;Function Lo(a:Integer):BYTE; External;FUNCTION CLI(VAR text:$STRING0):BYTE;EXTERNAL;Procedure List_out(a:byte); External;Function List_ready:boolean; External;Function Inkey:byte; External;{ Standard library externals }FUNCTION LENGTH(X:$STRING255):INTEGER;EXTERNAL;FUNCTION INDEX(X,Y:$STRING255):INTEGER; EXTERNAL;Procedure setlength(VAR x:$string0; y:integer);External;{ Module externals }Procedure Msgline;EXTERNAL;Procedure Msg(a:$string80);EXTERNAL;Procedure Msgln(a:$string80);EXTERNAL;PROCEDURE Star_info(VAR fname:min_string);External;PROCEDURE Star_delete(VAR fname:$STRING0);External;PROCEDURE Starcmd;External;PROCEDURE Log_off;External;PROCEDURE Save;External;PROCEDURE Load;External;PROCEDURE Read_info;External;PROCEDURE User_envir;External;PROCEDURE Cat;External;FUNCTION Hex2$(x:BYTE):$2STRING;External;PROCEDURE Hex1(digit:NIBBLE);External;PROCEDURE Hex2(val:Byte);External;PROCEDURE Dbl_print(A:dbl_word);External;FUNCTION Dbl_zero(val:dbl_word):BOOLEAN;External;FUNCTION Dbl_subt(val1,val2:dbl_word):dbl_word;External;FUNCTION Makedbl(val:INTEGER):dbl_word;External;PROCEDURE Notlistening;External;PROCEDURE Txerr(msg:$STRING255;no:BYTE);External;PROCEDURE Err_message(errno:BYTE);External;PROCEDURE ReplyOK;External;Function stn$(stn:integer):$string10;External;Procedure Extract$(VAR out$:$STRING0;data:$string255);External;Procedure I_am(VAR cmd_text:min_string); External;FUNCTION User_ok:BOOLEAN;External;Function Handle(fcb_no:NIBBLE):BYTE;External;Function Fcb_no(handle:BYTE):NIBBLE;External;Procedure Star_Sdisc(VAR cmd_text:min_string);External;Procedure Star_dir(VAR cmd_text:min_string);External;Procedure Do_logoff;External;{ Disc handling externals }PROCEDURE Open(VAR fblk:fcb;rw:R_W;VAR error:BYTE);EXTERNAL;PROCEDURE Put(VAR fblk:fcb;addr,length:INTEGER;VAR error:BYTE);EXTERNAL;PROCEDURE Get(VAR fblk:fcb;addr,length:INTEGER;VAR error:BYTE);EXTERNAL;PROCEDURE Close(VAR fblk:fcb);EXTERNAL;FUNCTION Size(VAR fblk:fcb):dbl_word;EXTERNAL;PROCEDURE Block(VAR fblk,CSD:fcb;VAR fname:$STRING0;VAR error:byte); EXTERNAL;PROCEDURE Delete(VAR fblk:fcb;VAR error:byte);EXTERNAL;FUNCTION Dir_first(VAR fblk:fcb;address:INTEGER):BYTE;EXTERNAL;FUNCTION Dir_next(VAR fblk:fcb;address:INTEGER):BYTE;EXTERNAL;PROCEDURE Disc_reset; EXTERNAL;PROCEDURE Cache_init; External;PROCEDURE Cache_idle; External;PROCEDURE Cache_empty; External;Procedure Dofs; External;BEGINdofsEND.