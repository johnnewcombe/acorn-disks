PROGRAM EXTTEST;CONSTsize=128;TYPEByte=0..255;Word=0..65535;Min_string=String[80];VARa:Word;ch:Char;aS:Min_string;data:ARRAY [1..size] OF Byte;{ 'FSRTN' externals }PROCEDURE PutS(addr:Word;VAR srce:Min_string); EXTERNAL;PROCEDURE GetScr(addr:Word;maxlength:BYTE;VAR dest:Min_string); EXTERNAL;PROCEDURE MidS(VAR text:Min_string;start,length:BYTE); EXTERNAL;FUNCTION Land(a,b:Word):Word;EXTERNAL; {Logical AND (bitwise)}FUNCTION Hi(a:Word):BYTE; EXTERNAL;FUNCTION Lo(a:Word):BYTE; EXTERNAL;FUNCTION Cli(VAR line:Min_string):BYTE;EXTERNAL;PROCEDURE ListOT(a:byte); EXTERNAL;  {List output}FUNCTION ListST:boolean; EXTERNAL;   {List status (TRUE=ready)}FUNCTION Inkey(VAR ch:Char):boolean; EXTERNAL;PROCEDURE Pad(VAR s:Min_string;len:Byte); EXTERNAL;BEGINWriteln('Testing PutS & GetScr');FOR a:=1 TO size DO data[a]:=123;aS:=Concat('hello',chr(13),'there');PutS(addr(data),aS);Writeln('data[11,12] contain:',data[11]:4,data[12]:4);GetScr(addr(data),100,aS);Writeln('Should be "hello"',aS);GetScr(addr(data),3,aS);Writeln('Should be "hel"',aS);aS:='Hello';Pad(aS,6);Writeln('Padded to 6 -->',aS,'<--');aS:='wurglsplurgsnodgrassplink';Pad(aS,10);Writeln('Shrunk to 10 -->',aS,'<--');Writeln;Writeln;Writeln('testing MidS');aS:='hello there';MidS(aS,1,2);Writeln('Should be "el"',aS);aS:='hello there';MidS(aS,30,2);Writeln('Should be null -->',aS,'<--');aS:='hello there';MidS(aS,8,10);Writeln('Should be "ere" -->',aS,'<--');Writeln;Writeln('Land(01234H,05678H)=',Land(01234H,05678H));Writeln('Lo(01234H)=',Lo(01234H));Writeln('Hi(01234H)=',Hi(01234H));Writeln;Writeln('List status=',List_ST);Writeln;Writeln('Now the difficult bit... CLI ');REPEAT  Write('aS :-');  Readln(aS);  Write('Cmd code=',Cli(aS):3);  Writeln(' cmd tail=',aS,'<--');  Writeln('Continue? (y/n)');  REPEAT UNTIL Inkey(ch)UNTIL (ch='n') OR (ch='N')END.