.co > BBC-ANFS-1.os opt1,0.igRegister 2 is the section count register.Register 3 is the sub-section count register.Register 4 is the sub-sub-section count register.The following sequences are for the C.ITOH printer..on27.on63.on35.on32    Set draft mode..on27.on63.on35.on34    Set "LQ" mode..on27.on51.on34         Start italic..on27.on51.on32         End italic..on27.on51.on33         Start bold..on27.on51.on32         End bold.Note that italic ends bold and vice versa..en.co Watch out a ............*CLOSE.os close.os remove anfsindex.io anfsindex.co The start bold macro.dm sb.on27.on51.on33.os bfont.en.co The finish bold macro.dm fb.on27.on51.on32.os thin.en.co The start italic macro.dm si.on27.on51.on34.os italic.en.co The finish italic macro.dm fi.on27.on51.on32.os thin.en.he.nn.os ACORN.nnAcorn Computers                                                                            .nn.ceAdvanced NFS ROM (BBC).rfOffice Systems.en.pl53.an0,1.co Start page, must include index.ix.co Transfer the macros to the index!co The generated index file for newnfs > anfsindex!bp!an0,1!co The start bold macro!dm sb!on27!on51!on33!os bfont!en!co The finish bold macro!dm fb!on27!on51!on32!os thin!en!co The start italic macro!dm si!on27!on51!on34!os italic!en!co The finish italic macro!dm fi!on27!on51!on32!os thin!en!he!nn!os ACORN!nnAcorn Computers                                                                            !nn!ceAdvanced NFS ROM (BBC)!rfOffice Systems!en!in0!sb!nn		Table of contents                                                            !rfPage!fb                                                                                  !ll75.en.ll76.co End of diversion.bp.sbThis document describes ANFS for the BBC microcomputer..fbLast changed 22/05/85 by Brian Cockburn..an2+1.ne5.an3,0.an4,0.sb.r2 New features implemented..fb.ix!nn!rf.r0Section .r2	New features implemented.en.in5.an3+1.ne5.si.r2..r3 Version..fi.ix.in0!in8!nn!rf.r0.r2..r3	Version.in5.en.ti+3This is now version "NFS
4.08.61"..an3+1.ne5.si.r2..r3 Help..fi.ix.in0!in8!nn!rf.r0.r2..r3	Help.in5.en.ti+3The *HELP command now shows the current version number and also shows the station number on a line which is identical to that displayed at BREAK time.  There are now two sub categories, "Net" for those commands which are part of the network filing system, and "Utils" for filing system independent utilities and commands..an3+1.ne5.si.r2..r3 Local buffering..fi.ix.in0!in8!nn!rf.r0.r2..r3	Local buffering.in5.en.ti+3The new ROM will buffer data from all open files in RAM in the I/O processor.  This will mean that all uses of the "osbget" and "osbput" calls will be significantly faster since only a small proportion (2%) will actually need to communicate over the network with the file server.  The buffering code will use 256 byte buffers on a "dynamic" basis.  This means that there may be more than one buffer allocated per file channel.  The number of active channels capability will be increased from the current eight to sixteen.  This will mean that higher performance file servers can be implemented without need to change the ANFS.  The limit of sixteen will also permit the user to maintain valid context and open files on more than one file server at once.  The current limit of eight channels is built in to both the file server and the original NFS..ti+3For this "dynamic
buffering" to take place a number of buffers are allocated dynamically to only those files that are open.  The number of buffers is actually variable, but if there were five  then a typical example would be if a single file was opened, then as it is read the first five pages of the file are sequentially put in to the buffers so if they are referred to they are available instantly.  When the sixth page is requested then the page that was referred to least recently is "thrown
out", this is the way that it will tend to function as cache.  This means that files are to a small extent cached by being in the buffer(s).  If two files were open then the buffers would be shared on a use basis so one file was being use twice as much as the other then it would have about twice as many buffers..ne5.ti+3The number of buffers will be set to five initially.  By having ROMS other than the ANFS ROM plugged in then more than five buffers may be available.  The following ROMs will result in more buffers being available; Acorn DFS, Acorn TFS, and Acorn ADFS, with six, nine, and eleven, respectively.  The maximum number of buffers is always sixteen.  .ne10.ti+3The algorithm for determining which buffer should be marked "Least
Recently
Used" (LRU) is as follows; if the buffer has nothing in it then it will be come LRU, if there are no buffers in this state then  the buffer adjacent to the buffer being accessed will be marked, this will not occur if the buffer has data in it but is not full.  This situation of a partially full buffer will prevent the "leading
edge" of a file being "thrown
out".  If mulitiple files are open then some algorithm will determine how much space is used for each file ie, if one file is "getting
a
lot
of
action" then it may have "more
than
it's
fair
share" of buffers allocated to it..ne10.ti+3The translation of user handles to file server handles is now more complex than before.  So the OSWORD call to set the context handles works in a slightly different way.  If the user handle is not open or is not a directory then no change will occur to the handle being written.  When this happens rather than issuing a channel error the reason code in the OSWORD block will be changed to zero to indicate failure.  Also an OSARGS call will be available to return the file server handle (and number) for a given user handle..an3+1.ne5.si.r2..r3 Extra ANFS star commands incorporated in the ROM..fi.ix.in0!in8!nn!rf.r0.r2..r3	Extra ANFS star commands incorporated in the ROM.in5.en.in10.an4,0.an4+1.ne6.r2..r3..r4.sbCdir <dir> (<number>).fb.ti+3Where the size is quoted in entries and a directory big enough to hold that many entries will be created.  The size range available is from one to 245, any number outside this range will give an error.  If the optional parameter is not given then the default of 19 will be used, this creates a directory of length &200..an4+1.ne6.r2..r3..r4.sbFlip.fb.ti+3The FLIP command will simply exchange the CSD and CSL.  This is a way of selecting the library as your CSD, this is useful when files which must be LOADed (via the OSFILE mechanism) are to be made public, and software must be able to access them easily.  It is unwise to use the *DIR or *LIB commands in the "Fliped" state, the user should FLIP back first..an4+1.ne8.r2..r3..r4.sbFS (<stn. id.>).fb.ti+3The FS command will change the file server number.  This allows a user to be logged on to two or more file servers at one time and to change between them.  Any open files will be ensured to the current file server before the number is changed.  If no argument is given ie. just *FS<CR> is typed then the current file server number will be reported..an4+1.ne6.r2..r3..r4.sbI am (<stn.id.>) <user id.> ((:<CR>)<password>).fb.ti+3This command is essentially unchanged from previous versions of the NFS but now accepts <DELETE> and control U during the "invisible" part and will delete either the last character typed or the entire "invisible" part respectively.  It is possible for this command to display the warning message "Data Lost" if data which had been written to a file was still buffered and was not able to be written to the file server.  This could be caused by the file server having been restarted..an4+1.ne6.r2..r3..r4.sbLcat (<dir>).fb.ti+3Catalog the current library.  Can also take an optional argument for a path from the currently selected library eg.  *LCAT fonts<CR> will catalog a directory called "fonts" in the currently selected library (CSL).  This facility is useful since, for example, the command *FONTS.ITALIC is looked up in the currently selected library..an4+1.ne6.r2..r3..r4.sbLex (<dir>).fb.ti+3Examine the current library.  Also takes an optional argument, see *LCAT..an4+1.ne6.r2..r3..r4.sbPass (:<CR>)<old password> <new password>.fb.ti+3Will now accept a ":" in the middle of the command like *I AM now does so that passwords may be hidden.  It should be noted that although the ":" may appear anywhere in the line it would be most useful to have it before both the the old and new passwords.  Whilst the "invisible" part is being typed control U deletes the entire "invisible" part and <DELETE> deletes the last character..an4+1.ne6.r2..r3..r4.sbRemove <object>.fi.ti+3This command is identical to *DELETE with the exception that it does not give the error "Not
found" if there is nothing to delete.  This makes it most useful in a program since it will not cause an unexpected error..an4+1.ne10.r2..r3..r4.sbWipe (<dir>).fb.ti+3Will offer each unlocked file or directory in the directory for deletion with a (Y/N/?) if "?" is typed the full object information will be printed followed by (Y/N).  If "Y" is typed then the file or directory will be deleted.  If anything else is typed the object will not be deleted..in5.an3+1.si.r2..r3 Extra Utils star commands incorporated in the ROM..fi.ix.in0!in8!nn!rf.r0.r2..r3	Extra Utils star commands incorporated in the ROM.in5.en.ti+3These commands may be issued when the ANFS is not the current filing system..in10.an4,0.an4+1.ne6.r2..r3..r4.sbClose.fb.ti+3Will close all open files on the current file server.  This is the same as a CLOSE#0.  Files (and directories) open on other file servers will not be closed.  This command does not close open directories..an4+1.ne6.r2..r3..r4.sbDump <filename> (<offset> (<address>)).fb.ti+3This dumps the file in hex and ASCII in a format suitable for the current screen width.  The optional offset parameter is the number of bytes (in hex) to skip before starting to dump. The address parameter is the address (in hex) to use as the address of the first byte in the file to be displayed on the left hand side of the dump listing, the default value for this is the files' load address..an4+1.ne16.r2..r3..r4.sbPollps (<stn.id.>|<ps type>).fb.ti+3The POLLPS command will show the currently selected printer server number and the currently selected printer type, eg..ti+6>*POLLPS.ti+6Printer server is 235 "PRINT".ti+6    235 is ready.ti+6>_.ti+3.ne10Following the printer server number will be a list of all the printers on the network and the current status of each.  The possible status conditions are either "ready" which means the printer is ready for use or has timed out the current user, "busy" which means the station shown is currently using that printer or "jammed" which means that the printer server has characters in it's buffer but has been unable to send characters out to it's printer for some period of time, this would usually be caused by the printer being off-line or unable to accept characters for some reason.  It should be noted that this command does not alter the printer server number, the state of FX5, or the state of FX6..ti+3.ne10If the command is followed by a station number then only the status of that station will be shown, no status will be shown if the station is not operating as a printer server.  The command can also have a textual argument eg. "DAISY", "LINE", "DRAFT", or "LASER".  If this textual argument is supplied then only printers of that type will have their status listed.  This allows the users to only examine the status of printers that they are interested in..an4+1.ne6.r2..r3..r4.sbPrint <filename>.fb.ti+3This implements the following approximate BASIC program ; .ti+3C=OPENIN(file$):REPEATVDUBGET#C:UNTILEOF#C:CLOSE#C.ti+3The main use of this is to display SPOOLed sequences of text and graphics sent to the screen..an4+1.ne16.r2..r3..r4.an5=3.an6=4.sbPS (<stn.id.>|<ps type>).fb.ti+3The command *PS followed by a number behaves in the exact same way as the loaded transient command PS as supplied with normal NFS (and File servers), ie. it sets the printer server station number to the one supplied.  If a textual argument is given then the printer server will be set to the number of the first printer of that type to be found "ready", if no printer is found to be ready then the printer server number will remain unchanged.  If no argument at all is supplied then the printer server number will be set to the first "ready" printer.  When a textual argument is supplied it will become the currently selected printer type, this type will be used when *PS is issued with no argument.  Note the power-up default type is "PRINT" to which all printer servers respond.  The command *POLLPS with no argument also uses this currently selected type.  If printing is taking place when the PS command is issued then the error message "Printer busy" will be issued and the printer server number will not change.  Again it should be noted that this command does not affect the states of FX5 and FX6..an4+1.ne6.r2..r3..r4.sbProt (<prot type>) ....fb.ti+3With no argument supplied this will protect against all operations, if any arguments are given then only those types of operations will be protected against.  Note that this can have multiple arguments eg. *PROT PEEK POKE<CR>..an4+1.ne6.r2..r3..r4.sbType <filename>.fb.ti+3Is the same as PRINT but treats <CR>, <LF>, <CR><LF>, or <LF><CR> as a line terminator and does a newline function. This command is for displaying text files..an4+1.ne6.r2..r3..r4.sbUnprot (<prot type>) ....fb.ti+3With no argument supplied this will unprotect against all operations, if any arguments are given then only those types of operations will be unprotected against.  Note that this can have multiple arguments eg.  *UNPROT POKE JSR<CR>..in5.an3+1.ne20.si.r2..r3 Printing..fi.ix.in0!in8!nn!rf.r0.r2..r3	Printing.in5.en.ti+3After a *FX5,4 has been issued the issuing of a VDU2 or control B will cause the status of the current printer server to be examined.  If this status is "jammed" or "busy" then an error (BRK) will be generated to that effect, then the VDU2 will be cancelled.  If any type of error occurs during either transmission or reception from the printer server then, as before, an error will be generated but now the VDU2 will be cancelled.  For more information see the section on errors.  Issuing a VDU3 whilst not printing will have no effect.  Issuing a VDU2 whilst printing will send any data which has been "printed" but buffered locally to the printer server, this will work even if there is no data to send.  This is most useful since this act of transmitting to the printer server will reset it's timeout.  If the <BREAK> key is pressed whilst printing is taking place then all characters in the printer buffer will be sent and the printing will be terminated (, a VDU3 will be "faked")..in5.an3+1.ne10.si.r2..r3 Extra interfaces..fi.ix.in0!in8!nn!rf.r0.r2..r3	Extra interfaces.in5.en.ti+3An OSWORD call is available for reading and writing the default printer server type.  This type is a six character ASCII string not terminated with a <CR> but space filled to six characters.  Other extensions will permit the reading of the handle associated with the last error, if there was one.  There is one to read how many characters are in the network printer buffer, and to determine the local network number and to translate external station addresses to local ones..in5.an3+1.ne20.si.r2..r3 Enhancements to the filing system..fi.ix.in0!in8!nn!rf.r0.r2..r3	Enhancements to the filing system.in5.en.in10.an4,0.an4+1.ne16.r2..r3..r4.sbWrite only files.fb.ti+3File servers now support the notion of files which are write only with public access.  These files will have access strings such as "WR/W" or "LWR/W" the reason is to support simple "mail" schemes with some privacy.  Write only files should be opened for update and will give an error if an attempt is made to read data (either with OSBGET or OSGBPB).  It should be noted that there will be no buffering of write only files.  Note that this function requires files servers of the following version or above;.ti+6"Level
2
Version
1.05" or "Version
IV.05"..an4+1.ne16.r2..r3..r4.sbOSFILE.fb.ti+3The new interface is called "create", this behaves exactly the same as "save" except that no data is transferred.  This means that files can be created with large lengths without the necessity of transferring large amounts of data.  Note that this is useful since to create a file of &10000 bytes in length would have required a save eg. *SAVE FILENAME 0 10000<CR> which would "crash" the BBC machine because in the process of saving the data certain "read
sensitive" locations are read.  These locations include data transfer registers of some I/O devices eg.  Tube, ADLC, and FDC.  Note that this function requires files servers of the following version or above;.ti+6"Level
2
Version
1.02" or "Version
IV.03"..an4+1.ne16.r2..r3..r4.sbOSARGS.fb.ti+3All calls to ensure files now function and ensure open file(s) to the file server.  The call which returned the version of NFS returns the same value as NFS
3.40 and NFS
3.60..ti+3A new function, expressed from BASIC as EXT#= is implemented.  This can either increase or decrease the length of a file.  Note that this function requires files servers of the following version or above;.ti+6"Level
2
Version
1.02" or "Version
IV.03"..ti+3The amount of disc space allocated to a file can now be read, this is greater than or equal to the current extent.  An interface has also been provided to provide for Z80 based software (CP/M,) the file server handle for a particular file, users are advised NOT to use this handle since its use could result in lost data..in5.an3+1.ne25.si.r2..r3 Error messages..fi.ix.in0!in8!nn!rf.r0.r2..r3	Error messages.in5.en.ti+3Both the "Not
listening" and "No
reply" error messages will have the station number added to them so they will now become "Station
nnn
not
listening" and "No
reply
from
station
nnn".  The "Channel" error will now be followed by the channel that was found to be in error eg. "Channel
99".  If any sort of error occurs during a "random
access" operation (OSBGET, OSBPUT, OSARGS, OSFILE, and OSGBPB) then information regarding the channel that had the error will be appended to the error message for example if the file server was very busy a message like : "Station
254
not
listening
on
channel
32" might be caused.  It should be noted that the channel associated with the error may not have been the channel the operation was attempted on.  If for instance an OSBPUT is attempted then a buffer may be required, if this means that the previous contents of the buffer need to be written back to the file server then the error may occur on the channel associated with that buffer..ne5.ti+3The fatal error caused by the OSWORD call now produces the message "Remoted" and may have channel information added if the error occurred during a "random
access" operation..ne20.ti+3There are now many new errors, "No!" which occurs when an attempt is made to *RUN a file with a load address of &FFFFFFxx and an execute address which is not &FFFFFFFF.  The expanded printer interface now has the extra errors "Printer
busy" , "Printer
jammed" , and "Station
not
present".  There is an error "Syntax" for commands which are recognized but have the wrong syntax (missing parameters).  The ANFS now maintains a checksum on its private workspace and this is checked before any random access operation, the new error is "Bad
net
sum".  If a file is opened on a particular fileserver then it can only be accessed when using that file server.  If an attempt is made to use the file whilst logged on to another file server then the error "Channel
nnn
not
on
this
file
server" will be issued.  The "Bad
hex" and "Bad
number" errors occur if a number was expected and non-hexadecimal or numeric characters were encountered.  The errors "Bad
station
number" and "Bad
net
number" are issued from, for instance, the *I
AM command.  "Bad
parameter" will be caused if a numeric argument is out of range.  "Write
only" is the error from attempting to read a write only file.  "No
more
FCBs" will be given if an attempt is made to open more than 16 objects at one time..in5.an3+1.ne10.si.r2..r3 A URD reference point..fi.ix.in0!in8!nn!rf.r0.r2..r3	A URD reference point.in5.en.ti+3Any object reference that starts with "&" is assumed to refer to a pathway from the URD not the CSD.  To a certain extent this is compatible with the ADFS since ADFS interprets "&" to mean the same as "$".  This will make access to files in non-local parts of the users' directory structure easier..in5.an3+1.ne10.si.r2..r3 Compatibility with DFS based software..fi.ix.in0!in8!nn!rf.r0.r2..r3	Compatibility with DFS based software.in5.en.ti+3If an object reference starts with ":0." ie. an explicit disc reference then this will be translated to "&.0.".  This means that disc software which references specific files can be made to work under the ANFS by creating a directories "0" and "1" in the users root directory.  This does prevent users using single character titles for discs, but this was an unlikely event in any case..in5.an3+1.ne10.an7=3.si.r2..r3 Additional library functionality..fi.ix.in0!in8!nn!rf.r0.r2..r3	Additional library functionality.in5.en.ti+3To be compatible with the ADFS, ANFS will adopt the convention that any file which is *RUN
<filename>, */<filename>, or *<filename> will be treated as *EXEC
<filename> rather than *RUN
<filename> if it has an exec address of &FFFFFFFF.  This means that EXEC files for commonly used sequences can be stored in the library.  There is also a "User Library" which is searched after the CSD and before the CSL.  This new library can therefore be used to over-ride normal library functions as well as to extend the users personal library.  The main advantage of this is that users who need nonstandard libraries no longer need to duplicate sections of the main library.  This "User library" is "&.Library", so the user should create a directory called "Library" in their root directory if they wish to take advantage of this facility..in5.an3+1.ne10.si.r2..r3 Time and Date..fi.ix.in0!in8!nn!rf.r0.r2..r3	Time and Date.in5.en.ti+3The time and the date as known by the file server have always been readable by the user, via the OSWORD call.  There now exists a second OSWORD call which reads the same information in a different (standard) format.  This format returns the information in BCD rather than packed binary..in5.an3+1.ne10.si.r2..r3 IO processor address space..fi.ix.in0!in8!nn!rf.r0.r2..r3	IO processor address space.in5.en.ti+3The IO processor normally accessed using addresses between &FFFF0000 and &FFFFFFFF.  For compatibility with future products this space has been increased to 128K bytes.  So now the IO processor memory can be addressed between &FFFE0000 and &FFFEFFFF as well.  It is recommended that this secondary area be used to refer to the screen RAM only..in5.an3+1.ne10.si.r2..r3 Automatic Bootstrapping..fi.ix.in0!in8!nn!rf.r0.r2..r3	Automatic Bootstrapping.in5.en.ti+3During a logon the normal course is to establish the users startup option and act on it.  Now any action which may have taken place will be suppressed if the <CONTROL> key is held depressed during the boot sequence.  Note that this suppression does not occur if the logon is a result of a "<SHIFT><BREAK>"..in5.an3+1.ne10.si.r2..r3 Re-tries..fi.ix.in0!in8!nn!rf.r0.r2..r3	Re-tries.in5.en.ti+3The defaults for the number of retries for several operations are now "user
adjustable".  The number of transmit retries is adjustable from one to 255 if zero is set then transmit will try "for
ever".  Since some operations are normally in-ESCapable after 255 tries the operation does become ESCapable.  The default for transmit is 255.  The operation *I
AM
<user id.> and VDU2 have a "machine
peek" prior to determine the existence of the destination station, for this type of transmit the default is ten.  When waiting for a reception the receive block is checked some number of times and if the reception has not occured then the "No
reply" error is issued.  The default number of times to check is 40.  These values are accessed via an OSWORD call..in5.an3+1.ne10.si.r2..r3 File server / Bridge net number translation..fi.ix.in0!in8!nn!rf.r0.r2..r3	File server / Bridge net number translation.in5.en.ti+3To support the use of bridges there is a call to translate a net number given by a remote station to one relative to the current station.  This will be via OSWORD .  This will mean that *VIEW, *REMOTE, and *NOTIFY will work for all cases in multi net configurations.  The same OSWORD will also return the local net number and the version number of the bridge code.  In the normal way if this call should fail for some reason the error will be indicated in the data returned to the user..ti+3The commands "*I AM", "*FS", and "*PS" have been changed so that if a full station number, including network number, is given then the network number is compared to the local net number.  If the net number given is the same as the local net number then the network number will be treated as zero.  This allows the use of global numbering without worry..in5.an3+1.ne10.si.r2..r3 Peaceful co-existence and the like..fi.ix.in0!in8!nn!rf.r0.r2..r3	Peaceful co-existence and the like.in5.en.ti+3Since there is more than one version of the ANFS a method has been devised to prevent the incorrect version from running in any machine.  This is done by checking the version of the operating system.  If the wrong operating system is detected the ROM will pretend it is unpluged and then the machine starts up in the normal way and will completely ignore the bad ROM..ti+3To prevent problems which would otherwise occur when the ANFS ROM and the DNFS ROM are both plugged in to the same machine an automatic mechanism will "frugal" the NFS part of the DNFS ROM so that the machine will function correctly.  This is necessary if a machine is to have both Econet (ANFS) and DFS..in5.an3+1.ne10.si.r2..r3 Entry of numbers in hexadecimal..fi.ix.in0!in8!nn!rf.r0.r2..r3	Entry of numbers in hexadecimal.in5.en.ti+3At any place a decimal number is expected a hexadecimal number may be entered if it is preceded by the "&" character, this is the same format as BASIC uses to enter hexadecimal.  Note that where an entry in hexadecimal is expected the "&" character should not be used..in5.an3+1.ne10.si.r2..r3 Tube host code..fi.ix.in0!in8!nn!rf.r0.r2..r3	Tube host code.in5.en.ti+3The ANFS ROM has the Tube host code the same as the DNFS had.  The operation of the Tube code does not rely on the existence of the Econet hardware..in5.an3+1.ne10.si.r2..r3 Events on reception..fi.ix.in0!in8!nn!rf.r0.r2..r3	Events on reception.in5.en.ti+3There is now a new event with number 254 which is the Econet receive event.  This event is enabled with *FX52,150 and disabled with *FX52,100.  When enabled an event will be generated by the completion of a successful reception.  The Y register will have the receive control block number that was used by the reception..ch BBC-ANFS-2