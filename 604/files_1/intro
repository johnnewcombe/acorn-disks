|\ intro|u1. IntroductionThis project is an extension of earlier work by the candidate to produce a file server operating on the Econet local area network.  The Econet system is designed by Acorn Computers Ltd. to provide a cheap networking system for their BBC microcomputer.  The primary function of Econet is to provide access to shared filestore and printer resources from workstation computers, although other network functions such as terminal concentrators and mail can be supported.  The interface between client computers and the file server has been defined and published by Acorn; support for various non-Acorn workstation computers has been provided by third parties.Compatibility with Acorn standards is one of the prime constraints on this project : potential users will wish to use standard (cheap) BBC micros, and to take advantage of any new products from Acorn or elsewhere which are designed to use the same network standards.  Hence it is necessary to accept the defects in the system and to design around them rather than re-designing to remove them.Econet is a CSMA/CD (or Ethernet-type) network.  Basic network protocols (the |vPrimitives|z) provide for transmission of packets of data from one station to another on any of 255 logical channels (called |vports|z).  These packets normally hold up to 8K bytes, and the primitives perform collision arbitration and handshake.  The handshake guarantees to detect non-delivery due to errors; it is left to higher level protocols to eliminate duplication (usually by use of sequence numbers).  In addition, a very limited broadcast operation is provided : 8 bytes may be broadcast, accompanied by a port number.  There is no handshake on broadcast packets.The Acorn file server provides a filing system with a hierarchical directory structure and simple access controls.  It runs on an expanded BBC microcomputer, and uses floppy discs for storage.  The earlier project was to provide a file server compatible with the Acorn system, but running on other hardware, in particular machines based on the Z80 microprocessor.  A completely new piece of software was written, primarily using the Pascal language.  The internal directory structure was changed completely to support larger discs, but the user's view of the filing system was kept compatible.  Many detail improvements were made over the Acorn specification, but the overall aim was one of compatibility.The fileserver program was designed to be used on a variety of different hardware configurations, with either hard or floppy discs, by use of different device drivers.  This led to the design of a machine specially adapted to support the file server.  The purpose of the present project is to modify and expand the existing software to take advantage of the special features of the new hardware.|a4|u1.1 Aims of the new systemThe main objective of the new hardware is to improve the standard of service observed by clients when the network filing service is heavily used by a number of workstations.  Measurements on existing fileservers show that overheads in the fileserver usually dominate response times, but as the maximum data rate on the network is 250,000 bits/sec, it is easily possible to use up all the available bandwidth.The standard fileservers have a simple structure : they poll for a request arriving from a client, perform the required action, return the results, and prepare for reception of another request.  This simple scheme has a number of defects :|i10|t7a) A single request can read (or write) any quantity of data from a single byte to a maximum of eight megabytes; response time to a simple request which is usually instantaneous can rise to many seconds if a large file is being loaded by another user.  This can result in the operation failing due to a timeout under extreme circumstances : the standard protocols do not distinguish between a server which is not accepting requests because it is busy and the absence of any station at that address.|t7b) As implied above, any stations requiring service while the fileserver is busy will transmit their request repeatedly, wasting network bandwidth.  More seriously, this can cause collisions between packets addressed to the fileserver and those being transmitted by the fileserver in an attempt to finish the previous transaction.  At best, network bandwidth is again wasted, and defects in the collision arbitration algorithm can cause timeouts, although this is rare as the algorithm usually favours the fileserver.|t7c) As there is no mechanism to queue requests, a client which makes a new request immediately after receiving the results of the previous one can have it accepted before another client, which has been repeatedly sending requests to the fileserver, has time to make another.  This means that one station can prevent others from receiving any service at all, and if that station continues to demand service at maximum rate any others will eventually time out (after typically 20 seconds).  This is a very serious problem : most client computers regard this |vNot Listening|z error as fatal, terminating program execution.|iThe proposed solution is to allow the fileserver to accept several requests at once.  If the stored requests are simply queued, this will reduce the unreliability problems described above.  If it is possible to overlap the processing of other requests with peripheral transfers, a useful improvement in performance will result; this is, of course, the usual motivation for multi-tasking.There are several requirements imposed on the hardware by this proposal.  It must be possible to receive packets from the network whilst disc transfers are in progress; this is not possible on the BBC micro, and since both the disc and network have data rates sufficiently high that they individually consume nearly 100% of the CPU cycles during a transfer, hardware assistance is generally required.  Extra memory will also be required, as existing fileservers already fill the 64K address space of their hosts with program and data structures.  Each task will require space to hold the data associated with the client and the operation in progress (typically 2K bytes), and there will be extra program and data concerned with scheduling and interlocks.|gintro2