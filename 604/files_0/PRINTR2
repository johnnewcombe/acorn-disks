|\ printer2|a15|u4.3 Job queueA number of points influenced the design of the job queue :|i3|m- The queue should be stored on disc, so that output is not lost if the system is shut down (eg. overnight)|m- Users should be able to view the contents of the queue, and delete jobs that they have submitted in error.|m- Users, unless suitably privileged, must not be able to delete other users' jobs.|m- The objects in the queue are all files.|iThe representation chosen for the queue was a standard directory within the filing system.  This has the advantage that users can use ordinary filing system commands (DELETE, EXAMINE etc.) to control the queue.  Any other system would require special software to be written for each type of client computer, while this uses protocols already built in to the client firmware.  The 'files' in this directory are marked as being special 'print job' entries, and so the user name and station number  can be stored (and displayed by EXAMINE) in place of normal file attributes such as the load and execution addresses.Directory entries are maintained (by pointers) in alphabetic order.  The queue is given the expected property of having older entries at the front by allocating 'filenames' to jobs which are actually numbers in ascending sequence.  The system has to scan the queue at startup, to determine the highest number already in use; it can reset to a small value if the queue is empty.  There is little problem with the number space being exhausted, as filenames are ten characters long.  Queue jumping can be arranged by use of the RENAME command - a job which is renamed to a lower number will be printed sooner.As a directory in the filing system, the full |vaccount|z system is available for access control purposes.  There are two controls to be imposed : un-privileged users must not be able to delete other users' jobs, nor may they queue-jump; in addition it is useful to be able to restrict the disc area used for spooling, such that the ordinary filing system cannot be paralysed by users (malicious or otherwise) who fill the whole disc with spool files.  It is not actually desirable to charge a spool file to a user's personal disc account, as users will often have little space left : there is no objection to users occupying extra space for spool files, which are of an essentially transitory nature.  Instead, all files in the queue are charged to a central account, allowing an overall limit.  The directory is also assigned to the same account : owners of this account can delete or rename all entries in the queue; the 'privilege' mentioned above is actually represented as ownership of the spooling account.To allow the originators control over their own jobs, the |vauxiliary account|z is available.  This is not charged for space accounting purposes, but the owner of a file's auxiliary account has full ownership of it.  Such an owner cannot actually rename it, as the rename operation requires ownership of the directory as well as the file.  When a job file is created, it will automatically acquire the account numbers of the directory (Note that the normal access controls have to be overidden for this create operation - the user would not normally be able to create files in this directory).  The primary account aquired in this way is correct, but a suitable value must be given to the auxiliary account number to give the user access.  Unfortunately, there was no way to detect which of a user's many accounts was his 'personal' account : it was necessary to extend the accounting system to incorporate this information.Having designed this system, the actual implementation is straightforward.  The files in the queue are created by the normal client service tasks : apart from the open operation, the printer data is treated in the same way as if it were being written to a normal file.  The data is actually written out to the printers under the control of two dedicated tasks, one for each printer.  These scan the print queue to find the first file which is both suitable for that printer (by the selection and access control criteria) and not open (open files are either still being created, or being printed on the other printer).  If there are no suitable files, the task will suspend until released by a client task which has generated a new candidate.  These tasks actually spend most of the time suspended, as the disc to printer transfer is controlled by the same mechanism as disc to memory transfers, but obviously takes much longer.|gprinter3