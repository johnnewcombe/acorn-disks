{ FSEXTExternal (m/code) module declarations}{Exit to exterior OS}PROCEDURE FSexit; EXTERNAL;{Econet Externals}PROCEDURE Ecoini; EXTERNAL; {Initialise}PROCEDURE Rxset(port:BYTE;stn,start,length:Word; blockno:BYTE);EXTERNAL;FUNCTION Rxread(VAR ctrl,port:BYTE;VAR stn,length:Word; blockno:BYTE):BOOLEAN;EXTERNAL;PROCEDURE Delrx(blockno:BYTE);EXTERNAL;PROCEDURE Ecotx(ctrl,port:byte;stn,start,length:Word;VAR result:byte);  EXTERNAL;{ 'FSRTN' externals }{string assignments}PROCEDURE PutS(addr:Word;VAR srce:Min_string); EXTERNAL;PROCEDURE GetScr(addr:Word;maxlength:BYTE;VAR dest:Min_string); EXTERNAL;PROCEDURE PutScr(addr:Word;VAR source:Min_string; max_length:Byte); EXTERNAL;{string/substring manipulation}PROCEDURE MidS(VAR text:Min_string;start,length:BYTE); EXTERNAL;FUNCTION Cli(VAR line:Min_string):BYTE;EXTERNAL;PROCEDURE Pad(VAR s:Min_string;len:Byte); EXTERNAL;PROCEDURE GSread(VAR in_S,out_S:Min_string;stop_on_delimeters:Boolean);EXTERNAL;{Access byte manipulation}PROCEDURE Exp_att(Atbyte:Byte; owner:Boolean; VAR atS:Min_string); EXTERNAL;PROCEDURE Imp_att(VAR atS:Min_string;VAR atbyte:Byte); EXTERNAL;PROCEDURE Set_att(VAR old_access:Byte; new_acces:Byte); EXTERNAL;{Number to ascii routines}PROCEDURE Hex2S(x:BYTE;VAR dummy:Min_string); EXTERNAL;PROCEDURE Dec_S(val:Byte; VAR aS:Min_string); EXTERNAL;PROCEDURE M_dec_B(val:Byte;addr:Word); EXTERNAL;PROCEDURE M_hex_B(val:Byte;address:Word); EXTERNAL;PROCEDURE M_hex_W(val:Word;address:Word); EXTERNAL;PROCEDURE M_hex_T(VAR val:Three_byte;address:Word); EXTERNAL;PROCEDURE M_hex_D(val:Dbl_word;address:Word); EXTERNAL;PROCEDURE DateS(VAR outS:Min_string;date:Date_type;today:Boolean); EXTERNAL;{Simple arithmetic & logical ops}PROCEDURE Dec_W(VAR x:Word); EXTERNAL;PROCEDURE Dec_B(VAR y:Byte); EXTERNAL;PROCEDURE Inc_W(VAR x:Word); EXTERNAL;PROCEDURE Inc_B(VAR y:Byte); EXTERNAL;PROCEDURE Make3(VAR dest:Three_byte;srce:Dbl_word); EXTERNAL;PROCEDURE Make4(VAR dest:Dbl_word;srce:Three_byte); EXTERNAL;FUNCTION Hi(a:Word):BYTE; EXTERNAL;FUNCTION Lo(a:Word):BYTE; EXTERNAL;FUNCTION Land_B(a,b:Byte):Byte;EXTERNAL; {Logical AND on bytes}FUNCTION Land_W(a,b:Word):Word;EXTERNAL; {Logical AND on words}FUNCTION Min_W(a,b:Word):Word; EXTERNAL;  {Return smaller of two args}FUNCTION Min_D(a,b:Dbl_word):Dbl_word; EXTERNAL;FUNCTION Handle(n:nibble):Byte; EXTERNAL;{ Returns the handle equivalent to the given fcb number (ie. 2^(n-1) )}{ 'Match' Externals  }FUNCTION Match(VAR name:min_string;addr:Word;VAR go_on:Boolean):Boolean;EXTERNAL;FUNCTION Legal(VAR name:min_string;VAR chain_no:Byte;VAR wild:Boolean):Boolean; EXTERNAL;{ File name match & test : <Legal> tests whether the string is legal, checks for wildcards and returns a hashing index for directory chains. Also, any '.' chars are translated to '*'. <Match> compares the name with a reference name in memory which is either exactly 10 chars long or is terminated CR. Wildcards are implemented in the <name> string. <go_on> indicates whether it is worth continuing a search, given that the names are in alpha order. }PROCEDURE Tst_ren(VAR out_specifier,result,search:Min_string;addr:Word; VAR go_on:Boolean); EXTERNAL;{Performs as <match>, then tries to create an output string, matching multiple wildcards in search and output specifier strings. Sets global <error>}{ Disc Routines }{NB. ALL DRIVE NUMBERS ORIGIN 0}PROCEDURE Inilow; EXTERNAL; {Hardware init}PROCEDURE Inidsk(VAR max_drv:Byte); EXTERNAL;{Init cache & read blk0 info. Also check how many drives}PROCEDURE Disc_wr(addr,len,offset:Word; pre_read:Boolean;VAR bl:block_descrip);  EXTERNAL;PROCEDURE Disc_rd(addr,len,offset:Word;VAR bl:block_descrip); EXTERNAL;{External cache routines}PROCEDURE C_idle; EXTERNAL;PROCEDURE C_empty; EXTERNAL;{ Free block map routines }PROCEDURE Dalloc(blk:Block_descrip); EXTERNAL;PROCEDURE Alloc(blk:Block_descrip); EXTERNAL;PROCEDURE F_blk(VAR blk:Block_descrip;VAR noblk:Word); EXTERNAL;{Print FS version string (+crlf)}PROCEDURE Ver_msg; EXTERNAL;FUNCTION Ver_adr:Word; EXTERNAL; {Return address & length of FS version string}FUNCTION Ver_len:Word; EXTERNAL; {With Tx header on front}{Console output - Code in HLIB}PROCEDURE Wrt(aS:Min_string); EXTERNAL;PROCEDURE Wrt_ln(aS:Min_string); EXTERNAL;PROCEDURE Pcrlf; EXTERNAL; {Code in DKMAN (!)}{Heap externals - code in HLIB}FUNCTION Heap(VAR ptr:user_ptr;size:Word):Boolean; EXTERNAL; {FALSE=>heap full}PROCEDURE Heap_rs; EXTERNAL;  {Reset heap}{Console Input - code in FSMDEP}FUNCTION Inkey(VAR ch:Char):boolean; EXTERNAL;{RTC routines}PROCEDURE Ini_clk; EXTERNAL;  {Sets up RTC interrrupts. <now> ALWAYS initialised?}PROCEDURE Get_clk; EXTERNAL;  {Reads from RTC into variable <now>}PROCEDURE Set_clk(address:Word); EXTERNAL;  {Set clk (and <now>) from data at address}  {Sets <error> if data out of range (error=&90)}