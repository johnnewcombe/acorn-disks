{  BIGFS  File Server main code }PROGRAM Fs;CONSTcache_del=200; {Wait before writing cache}{$Ifsconst}{$Ifsdecs}msg_cha:Byte;  {Global to specify the printer number for system messages}VARx:Word;a,b:Byte;ch:Char;aS:Min_string;{$Ifsext}{$Ifsp1e}{$Ifsp2e}{$Ifsp3e}{$Ifsp4e}{$Ifsusere}{$Ifsdatae}{$Ifsrnde}PROCEDURE Poll_PS; EXTERNAL;PROCEDURE Ini_PS; EXTERNAL;PROCEDURE CRC_chk; EXTERNAL;PROCEDURE FlushP; EXTERNAL;PROCEDURE Char_io; EXTERNAL;FUNCTION Syst_sw:Boolean; EXTERNAL;PROCEDURE Chk_sw; EXTERNAL;PROCEDURE On_line; EXTERNAL;FUNCTION System:Boolean;{ check if user is sys-priv. Also check for keyswitch position}BEGINIF (sys_priv IN user_info^.flags) THEN IF Syst_sw THEN error:=0 ELSE error:=5ELSE error:=0BAH;System:= error=0END;PROCEDURE Set_ps;{*** USES BL_DES ***}{Set printer info in block 0. ARG values : 0 Reset PS (& use new info) 1 Read printer table N 2 Write printer table N 3 Read priority table (1st byte is length) 4 Write N bytes of priority table 5 Read message channel 6 Write message channel}VARtx:RECORD  cmd_ret_codes:Word;  CASE Byte OF  1:(data:ARRAY[1..32] OF Byte);  2:(table_len:Byte;     choice1,choice2:Byte    )END;len,b:Byte;BEGINtx.cmd_ret_codes:=0;len:=2;WITH bl_des DO BEGIN  blk:=0;  drive:=0END;Cache_entry(bl_des,TRUE);IF system THEN CASE main_rx.data[1] OF  0:Ini_ps;  1:BEGIN    b:=main_rx.data[2];    IF (b>0) AND (b<3) THEN BEGIN      Move(cache.print_info[b],tx.data,32);      len:=34    END ELSE error:=06DH    END;  2:BEGIN    b:=main_rx.data[2];    IF (b>0) AND (b<3) THEN BEGIN      Move(main_rx.data[3],cache.print_info[b],32);      cache.needs_writing:=True    END ELSE error:=06DH;    END;  3:BEGIN    tx.table_len:=2;    Move(cache.auto_print1,tx.choice1,2);    len:=5;    END;  4:BEGIN    b:=main_rx.data[2];    IF (b>0) AND (main_rx.data[3]<3) THEN cache.auto_print1:=main_rx.data[3];    IF (b>1) AND (main_rx.data[4]<3) THEN cache.auto_print2:=main_rx.data[4];    cache.needs_writing:=True    END;  5:BEGIN    tx.table_len:=cache.message_channel;    len:=3    END;  6:BEGIN    cache.message_channel:=main_rx.data[2];    cache.needs_writing:=True    END;  OTHERWISE error:=06DHEND;IF error=0 THEN Eco_tx(0,main_rx.reply,client_stn,Addr(tx),len,b)ELSE err_messageEND;BEGIN {Main block}Ecoini;msg_cha:=1; {All error messages to parallel printer until disc system running}Char_io; {Initialise wrch etc. MUST come after ecoini for serial port to work.          also initialise messag, debug}CRC_chk; {Must come after I/O is initialised}cache.which_blk.drive:=255; {Out of range drive no. <=> not in use}cache.needs_writing:=False;Inilow;Ini_clk;Bld_map; {Build disc maps}On_line; {Illuminate the LED !}REPEAT {Main loop}  Rxset(cmdport,0,Addr(mainRX),min_size+5,task_no);  WHILE NOT Rxread(rx_seq,b,client_stn,x,task_no) DO BEGIN    Chk_sw; {Check power switch}{Empty caches}    IF (cache_time=10) AND (cache.needs_writing) THEN BEGIN      Disc_wr(Addr(cache.data),block_size,0,False,cache.which_blk);      cache.needs_writing:=False    END;    IF cache_time=0 THEN  C_idle {Purge EXTERNAL cache}    ELSE Dec_W(cache_time);{Update time}    Get_clk;{Service PS}    Poll_ps;  END;{ Drops through here when a packet arrives on the FS command port }  IF debug THEN BEGIN    Wrt('FN=');    Dec_S(mainRX.FN,aS);    Wrt(aS);    Wrt(' Stn');    StnS(client_stn,aS);    Wrtln(aS)  END;   {Check if logged on or *cmd which could be *I AM }  IF (mainRx.fn=0) OR User_ok THEN  CASE mainRX.fn OF    0:Starcmd;    1:Save;    2:Load;    3:Cat;    5:Load;    6:X_open;    7:X_close;    8:B_get;    9:B_put;   10:MB_get;   11:MB_put;   12:Rd_rnd_info;   13:Wr_rnd_info;   14:Disc_info;   15:Read_users;   16:Read_time;   17:Eof;   18:Read_info;   19:Write_info;   20:Del_object;   21:User_envir;   22:Set_opt;   23:Log_off;   24:Find_user;   4,25:EcoTx(0,mainRx.reply,client_stn,Ver_adr,Ver_len,error);{version string}   26:Free_space;   27:Cdir;   28:Set_time;   64:Acct_space;   65:Set_ps;  255:BEGIN {Set message level}      IF System THEN BEGIN        error:=0;        messag:=mainRx.data[1]<>0;        debug:=mainRx.data[2]<>0      END      ELSE error:=0BAH; {Insuff. priv.}      Err_message    END;   OTHERWISE BEGIN error:=133; Err_message END;  END {of case}  ELSE BEGIN error:=191; Err_message END; {'Who are U?' }  cache_time:=cache_del { Delay before writing cache }UNTIL False;END.