{  newPS1  PRINT Server INCLUDE FILE }IF log_on_open THEN IF Rx_read(seq_no,b,print_stn,w,log_on_rxcb) THEN BEGIN{ Note that log-on packets should be one byte long BUT NFS 3.6 will buffer any extra ctrl-Cs and send them in front of the next log-on (Bug no. 3079a)}  log_on_open:=False;  Who;  IF print_user=Nil THEN b:=0 ELSE b:=print_user^.printer; {b:=printer type}  IF b=0 THEN BEGIN  {Decide on default printer}    IF Available(first_choice) AND Free(first_choice)    THEN b:=first_choice ELSE b:=second_choice  END;  IF Available(b) AND Free(b) AND (log_on_buffer[w] < 3)  THEN WITH printer[b] DO BEGIN       {Requested printer exists & is authorised}    IF in_use THEN BEGIN {Must have timed out}    { IF NOT no_endtext THEN PrintS(endtext,b); }      IF rx_open THEN Del_rx(print_rxcbs+b)    END;    in_use:=True;    stn:=print_stn;    IF print_user=Nil THEN userid:='[No name] '    ELSE Move(print_user^.fcbs[1].curr_blk,userid,10);    start_time:=now;    old_protocol:=log_on_buffer[w] = 2; {Note that =1 (illegal) not trapped}    last_seq:=Land_B(seq_no,1);    log_off:=False;    rx_open:=False;    tim_out[b]:=128; {Don't start timeout until ack sent}    StnS(print_stn,aS);    Pad(aS,15);  {statID text}    IF messag THEN BEGIN      Wrt(aS);      Wrt('Printing - ');      IF old_protocol THEN Wrt('Old') ELSE Wrt('New');      Wrtln(' protocol')    END  ENDEND;FOR b:=1 TO 2 DO WITH Printer[b] DO BEGIN  IF in_use THEN IF rx_open THEN BEGIN    IF Rx_read(seq_no,a,print_stn,w,print_rxcbs+b) THEN BEGIN    {Data received}      buff_max:=w;      IF last_seq=Land_B(seq_no,1) THEN buff_ptr:=buff_max  {Wrong seq -ignore}      ELSE BEGIN        buff_ptr:=1;        IF old_protocol THEN log_off:=buffer[buff_max]=3        ELSE log_off:=Land_B(seq_no,4)=4;   {new protocol logoff}        last_seq:=seq_no;        IF NOT log_off THEN Inc_B(buff_max)  {Last byte junk if logoff}      END;      rx_open:=False;      tim_out[b]:=128  {Disable timeout while we process data}    END  END  ELSE  { IF rx_open ELSE ... }  IF (buff_ptr=buff_max) THEN BEGIN  {Buffer empty -> send ack to client, ?open Rx}    IF log_off THEN BEGIN      in_use:=False;    { IF NOT no_endtext THEN PrintS(end_text,b) }    END ELSE Rx_set(print_port,stn,Addr(buffer),prx_size,print_rxcbs+b);    rx_open:=True;  {Only required valid if <in_use> still true}    Eco_tx(last_seq,print_port,stn,0,1,a); {Send ack to client}    tim_out[b]:=print_timeout  END;{Send buffer contents to printer}  IF buff_ptr<>buff_max THEN BEGIN    a:=buff_max-buff_ptr;    Print(Addr(buffer[buff_ptr]),a,b);      {2nd param is bytes to print - returns number actually printed}    buff_ptr:=buff_ptr+a  ENDEND;{Ensure log_on rxcb open iff >=1 printer free}IF (log_on_open <> (free(1) OR free(2))) THEN BEGIN  IF log_on_open THEN Del_rx(log_on_rxcb)  {printer no longer free}  ELSE Rx_set(print_port,0,Addr(log_on_buffer),log_on_size,log_on_rxcb);  log_on_open:=NOT log_on_openEND{End of Poll_ps}END;